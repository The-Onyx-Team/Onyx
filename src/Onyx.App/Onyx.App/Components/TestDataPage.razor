@page "/"
@using Android.App

<button @onclick="RequestPermission">Request Access</button>

@if (UsageString != null)
{
    @foreach (var usage in UsageString)
    {
        <div>@usage</div>
    }
}
@if (UsageRaw != null)
{
    @foreach (var usage in UsageRaw)
    {
        <div>
            <div>Name: @usage.PackageName</div>
            <div>Time in foreground: @TimeSpan.FromMilliseconds(usage.TotalTimeInForeground)</div>
            <div>Time visible: @TimeSpan.FromMilliseconds(usage.TotalTimeVisible)</div>
            <div>Last time used: @DateTimeOffset.FromUnixTimeMilliseconds(usage.LastTimeUsed)</div>
            <div>@usage.LastTimeForegroundServiceUsed</div>
            <div>@usage.TotalTimeForegroundServiceUsed</div>
        </div>
    }
}
@if (UsageClean != null)
{
    @foreach (var usage in UsageClean)
    {
        <div>
            <div>Name: @usage.Name</div>
            <div>Time in foreground: @usage.TimeInForeground</div>
        </div>
    }
}

@code {

    private IEnumerable<string>? UsageString { get; set; } = [];
    private IEnumerable<UsageStats>? UsageRaw { get; set; } = [];
    private List<CleanUsageData>? UsageClean { get; set; } = [];
    
    protected override void OnInitialized()
    {
        UsageRaw = UsageStatsHelper.GetUsageStatsLastMonth(Application.Context)
            .Where(u => u.TotalTimeVisible != 0 && u.TotalTimeInForeground != 0);
        try
        {
            foreach (var usage in UsageRaw)
            {
                // variables
                string? package = usage.PackageName;
                string cleanName = "";
                string[] notNames = ["com", "android", "google", "apps"];

                // clean name
                if (package != null)
                {
                    string[] names = package.Split('.');
                    foreach (var name in names)
                    {
                        if (!notNames.Contains(name.ToLower()))
                        {
                            StringBuilder sb = new StringBuilder();
                            sb.Append(name);
                            sb[0] = Convert.ToChar(sb[0].ToString().ToUpper());
                            var temp = sb.ToString();
                            cleanName += $"{temp} ";
                        }
                    }
                }

                // get time format
                var timeInFg = TimeSpan.FromMilliseconds(usage.TotalTimeInForeground);

                // append to list
                if (UsageClean != null)
                    UsageClean.Add(new()
                    {
                        Name = cleanName,
                        TimeInForeground = timeInFg
                    });
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    
    private void RequestPermission()
    {
        UsageStatsService.OpenUsageAccessSettings();
    }
}