@inject IUserManager UserManager

<MudForm action="account/perform-external-login" method="post" 
         Class="form-horizontal">
    <AntiforgeryToken/>
    <MudInput InputType="InputType.Hidden" Underline="false" name="ReturnUrl" value="@ReturnUrl"/>
    <MudContainer Class="d-flex justify-center">
        @foreach (var provider in m_ExternalLogins)
        {
            <MudIconButton Style="color: black"
                           Icon="@GetIcon(provider.DisplayName)" 
                           name="provider" value="@provider.Name" ButtonType="ButtonType.Submit"
                           title="@($"log in using your {@provider.DisplayName} account")"/>
        }
    </MudContainer>
</MudForm>

<!--<form class="form-horizontal" action="account/perform-external-login" method="post">
    <div>
        <AntiforgeryToken/>
        <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
        <p>
            @foreach (var provider in m_ExternalLogins)
            {
                <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name"
                        title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
            }
        </p>
    </div>
</form>-->

@code {
    private AuthenticationScheme[] m_ExternalLogins = [];

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        m_ExternalLogins = (await UserManager.GetExternalAuthenticationSchemas()).ToArray();
    }
    
    private string GetIcon(string iconName)
    {
        return iconName.ToLower() switch
        {
            "github" => "fa-brands fa-github",
            "google openidconnect" => "fa-brands fa-google",
            "Apple" => "fa-brands fa-apple",
            "microsoft" => "fa-brands fa-microsoft",
            _ => Icons.Material.Filled.Help
        };
    }
}