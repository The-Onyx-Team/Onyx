@page "/account/resetPasswordWithEmail"
@inject IUserManager UserManager
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

@layout AuthNavLayout

<PageTitle>Reset Password</PageTitle>

<MudText Typo="Typo.h4"
         Class="mb-3">Reset Password</MudText>
<EditForm Model="m_ResetModel" OnValidSubmit="SetPassword"
          FormName="ResetPasswordForm">
    <DataAnnotationsValidator/>
    <ValidationSummary class="mud-alert-text-error"/>

    <MudTextField Class="mb-3" Label="Password" Variant="Variant.Outlined"
                  @bind-Value="m_ResetModel.Password"
                  AdornmentColor="Color.Primary"
                  InputType="InputType.Password"/>
    <ValidationMessage For="() => m_ResetModel.Password">Password must contain at least 8 characters!</ValidationMessage>
    <MudTextField Class="mb-3" Label="Confirm Password" Variant="Variant.Outlined"
                  @bind-Value="m_ResetModel.ConfirmPassword"
                  AdornmentColor="Color.Primary"
                  InputType="InputType.Password"/>
    <ValidationMessage For="() => m_ResetModel.ConfirmPassword">Passwords don't match!</ValidationMessage>
    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Class="rounded mud-button-full-width mb-3"
               Style="background-color: black">
        Reset
    </MudButton>
</EditForm>

@code {

    [SupplyParameterFromQuery(Name = "userId")]
    public string? Id { get; set; }
    
    ResetModel m_ResetModel = new(); 
    
    public class ResetModel
    {
        [Required]
        public string Password { get; set; } = "";
        
        [Required]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = "";
    }

    private async Task SetPassword()
    {
        if (Id != null)
        {
            var result = await UserManager.SetPasswordAsync(Id, m_ResetModel.Password);
            if (result.Success)
            {
                Snackbar.Add("Successfully reset password! Redirecting to Login...", Severity.Success);
                await Task.Delay(3000);
                NavManager.NavigateTo("/account/login", forceLoad: true);
                return;
            }
        }
        Snackbar.Add("Something went wrong while resetting the password!", Severity.Error);
    }
}