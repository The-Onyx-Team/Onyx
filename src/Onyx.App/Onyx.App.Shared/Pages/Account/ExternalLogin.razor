@page "/Account/ExternalLogin"
@attribute [ExcludeFromInteractiveRouting]
@using Microsoft.Extensions.Logging
@using Onyx.App.Shared.Services.Auth

@inject ILogger<ExternalLogin> Logger
@inject IUserManager UserManager
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>
<h2>Associate your @ProviderDisplayName account.</h2>
<hr/>

<div class="alert alert-info">
    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="email"
                           placeholder="Please enter your email."/>
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@if (m_Message is not null)
{
    <div class="alert alert-danger" role="alert">
        @m_Message
    </div>
}

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? m_Message;
    private ExternalLoginData? m_ExternalLoginInfo;

    [SupplyParameterFromForm] private EmailInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    private string? ProviderDisplayName => m_ExternalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            m_Message = RemoteError;
            return;
        }

        var info = await UserManager.GetExternalLoginDataAsync();

        m_ExternalLoginInfo = info;

        if (Action == LoginCallbackAction)
        {
            await UserManager.HandleExternalLoginAsync(m_ExternalLoginInfo, ReturnUrl, Input);
            StateHasChanged();
            return;
        }
        
        StateHasChanged();
        NavigationManager.NavigateTo("/account/login");
    }

    private async Task OnValidSubmitAsync()
    {
        await UserManager.HandleNewExternalLoginAsync(m_ExternalLoginInfo, Input, ReturnUrl);
    }

}