@page "/account/resetPassword"
@inject IUserManager UserManager
@inject ISnackbar Snackbar

@layout AuthNavLayout

<PageTitle>Reset Password</PageTitle>

<MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
               Style="position: absolute; top: 2vh; left: 1vw;"
               Href="/account/login"
               Color="Color.Primary"/>

<MudText Typo="Typo.h4"
         Class="mb-3">Reset Password</MudText>
<EditForm Model="m_Email" OnValidSubmit="SendResetEmail"
          FormName="ResetPasswordForm">
    <DataAnnotationsValidator/>
    <ValidationSummary class="mud-alert-text-error"/>

    <MudTextField Class="mb-3" Label="Email" Variant="Variant.Outlined"
                  @bind-Value="m_Email"
                  AdornmentColor="Color.Primary"
                  InputType="InputType.Email"/>
    <ValidationMessage For="() => m_Email">Email format not valid!</ValidationMessage>
    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Class="rounded mud-button-full-width mb-3"
               Style="background-color: black">
        Send Email
    </MudButton>
</EditForm>

@code {

    private string m_Email = "";

    private async Task SendResetEmail()
    {
        
        if (!string.IsNullOrEmpty(m_Email))
        {
            var result = await UserManager.ResetPasswordAsync(m_Email);
            if (!result.Success)
                Snackbar.Add("Email does not exist!", Severity.Error);
            else
                Snackbar.Add("Successfully sent reset email!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Email does not exist!", Severity.Error);
        }

       
    }

}