@page "/account/manage/external"
@using Microsoft.AspNetCore.Authorization
@using Onyx.App.Shared.Services.Auth
@attribute [Authorize]
@inject IUserProvider UserProvider
@inject IUserManager UserManager

@if (m_User is null)
{
    <p>Loading...</p>
}
else
{
    <p>Welcome @m_User.Name</p>
    @if (m_CurrentLogins?.Count > 0)
    {
        <h3>Registered Logins</h3>
        <table>
            <tbody>
            @foreach (var login in m_CurrentLogins)
            {
                <tr>
                    <td>@login.ProviderDisplayName</td>
                    <td>
                        <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmit" method="post">
                            <AntiforgeryToken/>
                            <div>
                                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                                <button type="submit" class="btn btn-primary"
                                        title="Remove this @login.ProviderDisplayName login from your account">Remove
                                </button>
                            </div>
                        </form>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }

    @if (m_OtherLogins?.Count > 0)
    {
        <h4>Add another service to log in.</h4>
        <hr/>
        <form action="account/manage/link-external-login" method="post">
            <AntiforgeryToken/>
            <div>
                <p>
                    @foreach (var provider in m_OtherLogins)
                    {
                        <button type="submit" class="btn btn-primary" name="Provider" value="@provider.Name"
                                title="Log in using your @provider.DisplayName account">
                            @provider.DisplayName
                        </button>
                    }
                </p>
            </div>
        </form>
    }
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private User? m_User;
    private IList<ExternalLoginData>? m_CurrentLogins;
    private IList<AuthenticationScheme>? m_OtherLogins;


    [SupplyParameterFromForm] private string? LoginProvider { get; set; }
    [SupplyParameterFromForm] private string? ProviderKey { get; set; }
    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        m_User = await UserProvider.GetRequiredUserAsync();

        if (Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }

        m_OtherLogins = (await UserManager.GetExternalAuthenticationSchemas()).ToList();
        m_CurrentLogins = (await UserManager.GetLoginsAsync(m_User))?.ToList();
    }

    private void OnSubmit()
    {
        //var toRemove = (LoginProvider!, ProviderKey!);
        // TODO
    }

    private Task OnGetLinkLoginCallbackAsync()
    {
        return Task.CompletedTask;
        // var userId = await UserManager.GetUserIdAsync(user);
        // var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        // if (info is null)
        // {
        //     RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        // }
        //
        // var result = await UserManager.AddLoginAsync(user, info);
        // if (!result.Succeeded)
        // {
        //     RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        // }
        //
        // // Clear the existing external cookie to ensure a clean login process
        // await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        //
        // RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }

}