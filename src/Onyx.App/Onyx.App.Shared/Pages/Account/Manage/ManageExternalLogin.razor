@page "/account/manage/external"
@inject IUserProvider UserProvider
@inject IUserManager UserManager

<MudContainer Fluid="true" MaxWidth="MaxWidth.False" Class="mt-4">
    @if (m_User is null)
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
    else
    {
        <MudText Typo="Typo.h4" Class="mb-1">Manage External Logins</MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-4">Welcome @m_User.Name</MudText>

        @if (m_CurrentLogins?.Count > 0)
        {
            <MudCard Class="mb-4 px-4 py-4" Outlined="true">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-2">Registered Logins</MudText>
                    <MudTable Items="@m_CurrentLogins" T="ExternalLoginData">
                        <HeaderContent>
                            <MudTh>Provider</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="login">
                            <MudTr>
                                <MudTd>@login.ProviderDisplayName</MudTd>
                                <MudTd>
                                    <EditForm Context="_" OnValidSubmit="OnSubmit">
                                        <AntiforgeryToken/>
                                        <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                                        <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                                        <MudButton ButtonType="ButtonType.Submit"
                                                   Color="Color.Error"
                                                   Variant="Variant.Outlined"
                                                   Title="Remove this login">
                                            Remove
                                        </MudButton>
                                    </EditForm>
                                </MudTd>
                            </MudTr>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        }

        @if (m_OtherLogins?.Count > 0)
        {
            <MudCard Class="mb-4 px-4 py-4" Outlined="true">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-2">Add another service to log in</MudText>
                    <form action="account/manage/link-external-login" method="post">
                        <AntiforgeryToken/>
                        <MudStack Direction="Row" Spacing="2">
                            @foreach (var provider in m_OtherLogins)
                            {
                                <MudButton Type="Submit"
                                           Color="Color.Primary"
                                           Name="Provider"
                                           Value="@provider.Name"
                                           Title="@($"Log in using your {provider.DisplayName} account")">
                                    <MudIcon Icon="@GetProviderIcon(provider.Name)" Class="mr-1" />
                                    @provider.DisplayName
                                </MudButton>
                            }
                        </MudStack>
                    </form>
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private User? m_User;
    private IList<ExternalLoginData>? m_CurrentLogins;
    private IList<AuthenticationScheme>? m_OtherLogins;


    [SupplyParameterFromForm] private string? LoginProvider { get; set; }
    [SupplyParameterFromForm] private string? ProviderKey { get; set; }
    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        m_User = await UserProvider.GetRequiredUserAsync();

        if (Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }

        m_OtherLogins = (await UserManager.GetExternalAuthenticationSchemas()).ToList();
        m_CurrentLogins = (await UserManager.GetLoginsAsync(m_User))?.ToList();
    }

    private void OnSubmit()
    {
        //var toRemove = (LoginProvider!, ProviderKey!);
        // TODO
    }

    private Task OnGetLinkLoginCallbackAsync()
    {
        return Task.CompletedTask;
        // var userId = await UserManager.GetUserIdAsync(user);
        // var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        // if (info is null)
        // {
        //     RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        // }
        //
        // var result = await UserManager.AddLoginAsync(user, info);
        // if (!result.Succeeded)
        // {
        //     RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        // }
        //
        // // Clear the existing external cookie to ensure a clean login process
        // await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        //
        // RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }
    
    private string GetProviderIcon(string provider)
    {
        return provider.ToLower() switch
        {
            "google" => Icons.Custom.Brands.Google, // Für Google
            "googleopenidconnect" => Icons.Custom.Brands.Google, // Google OpenID Connect
            "microsoft" => Icons.Custom.Brands.Microsoft,
            "github" => Icons.Custom.Brands.GitHub,
            _ => Icons.Material.Filled.AccountCircle
        };
    }

}