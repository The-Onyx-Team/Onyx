@page "/home"
@using Onyx.App.Shared.Services.Usage
@using Onyx.Data.ApiSchema
@layout AppLayout
@inject IDeviceManager DeviceManager
@inject IUsageDataService UsageManager

<MudContainer xmlns="http://www.w3.org/1999/html" Style="padding: 2vw">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker Label="Filter"
                           Editable="true"
                           Date="m_Date"
                           DateChanged="OnDateChanged"
                           Mask="@(new DateMask("dd.MM.yyyy"))"
                           DateFormat="dd.MM.yyyy"
                           Placeholder="de-AT Date"
                           Variant="Variant.Filled"
                           Style="width: 100%;" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudSelect T="DeviceDto" Label="Device"
                       @bind-Value="SelectedDevice"
                       Variant="Variant.Filled"
                       Style="width: 100%;">
                <MudSelectItem Value="@(default(DeviceDto))">None</MudSelectItem>

                @if (m_Devices is not null)
                {
                    @foreach (var device in m_Devices.Result)
                    {
                        <MudSelectItem Value="device">@device.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
    

    <br/>

    @if (!m_DeviceSelected && _usageRestriction != null)
    {
        <MudText Typo="Typo.h6">Device Usage Distribution</MudText>
        <br />
        <MudGrid Gutter="3">
            @foreach (var usage in _usageRestriction)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.subtitle2">@usage.Title</MudText>
                        <MudText Typo="Typo.body1">@usage.Value</MudText>
                        <MudProgressLinear Color="@usage.Color" Value="@usage.Progress" />
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
        <MudDivider Class="my-4" />
    }

    

    <MudText Typo="Typo.h6">Reports</MudText>
    <br/>
    <MudGrid Gutter="3">

        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4 mud-theme-dark">
                <MudText Typo="Typo.h6">Usage</MudText>
                <br/>
                <MudPaper Class="doc-section-component-container">
                    <MudChart ChartType="ChartType.StackedBar"
                              ChartSeries="@_weeklyAppData"
                              LegendPosition="Position.Bottom"
                              XAxisLabels="@_xAxisDays"
                              Width="auto"
                              Height="38vh"
                              AxisChartOptions="_axisChartOptions"
                              ChartOptions="@(new() { ChartPalette = ["#9D4D27", "#C58848", "#494C3B"] })"
                              style="pointer-events: none;">
                    </MudChart>
                </MudPaper>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4 mud-theme-dark">
                <MudText Typo="Typo.h6">Top Categories</MudText>
                <br/>
                <MudTable Items="_appRanking">
                    <HeaderContent>
                        <MudTh>Rank</MudTh>
                        <MudTh>App</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Rank">@context.Key</MudTd>
                        <MudTd DataLabel="App Name">@context.Value</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4 mud-theme-dark">
                <MudText Typo="Typo.h6">Usage Distribution</MudText>
                <br/>
                <MudPaper Class="pa-4">
                    <MudChart ChartType="ChartType.Donut"
                              Width="auto"
                              Height="25vh"
                              InputData="@_todaysAppData"
                              InputLabels="@_labels"
                              style="pointer-events: none;"
                              ChartOptions="@(new() { ChartPalette = ["#9D4D27", "#C58848", "#494C3B"] })">
                    </MudChart>
                </MudPaper>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4 mud-theme-dark">
                <MudText Typo="Typo.h6">Progress</MudText>
                <br/>
                <MudPaper Class="doc-section-component-container">
                    <MudChart ChartType="ChartType.Line"
                              ChartSeries="@_monthlyAppData"
                              XAxisLabels="@_xAxisMonths"
                              ChartOptions="@(new() { ChartPalette = ["#9D4D27", "#C58848", "#494C3B"] })"
                              Width="auto"
                              style="pointer-events: none;"
                              Height="30vh"/>
                </MudPaper>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
</MudContainer>



@code {
    private DateTime? m_Date = DateTime.Today;
    
    private bool m_DeviceSelected;
    private Task<List<DeviceDto>>? m_Devices;
    private DeviceDto? m_SelectedDevice;

    private Task<List<UsageDto>>? m_Usage;

    protected override async Task OnInitializedAsync()
    {
        m_Devices = DeviceManager.GetDevices();
        await LoadUsageAsync();
    }

    private DeviceDto? SelectedDevice
    {
        get => m_SelectedDevice;
        set
        {
            m_SelectedDevice = value;
            m_DeviceSelected = value is not null;
        }
    }
    
    private async Task OnDateChanged(DateTime? newDate)
    {
        if (newDate.HasValue)
        {
            m_Date = newDate.Value;
            await LoadUsageAsync();
        }
    }

    

    private Task LoadUsageAsync()
    {
        var date = m_Date ?? DateTime.Today;
        var start = date.Date;
        DateTime end;
        if (date.Date == DateTime.Today)
            end = DateTime.Now;
        else
            end = date.Date.AddDays(1).AddTicks(-1);

        m_Usage = UsageManager.GetUsageDataAsync(start, end);
        
        return m_Usage;
    }

    //hä
    private async Task OnDeviceChanged(DeviceDto? device)
    {
        m_SelectedDevice = device;
        m_DeviceSelected = device != null;
        await LoadUsageAsync();
    }
    
    
    
    
    
    readonly List<Metric> _usageRestriction =
    [
        new("Instagram", "1h 30min (40%)", 40, Color.Secondary),
        new("TikTok", "40min (20%)", 20, Color.Primary),
        new("Youtube", "1h 30min (60%)", 60, Color.Error),
        new("SnapChat", "1h 20min (80%)", 80, Color.Warning)
    ];

    public record Metric(string Title, string Value, double Progress, Color Color);
    
    //bar
    private readonly AxisChartOptions _axisChartOptions = new() { StackedBarWidthRatio = 0.5};


    private readonly List<ChartSeries> _weeklyAppData =
    [
        new() { Name = "Instagram", Data = [40, 20, 25, 27, 46, 60, 48] },
        new() { Name = "TikTok", Data = [19, 24, 35, 13, 28, 15, 13] },
        new() { Name = "YouTube", Data = [8, 6, 11, 13, 4, 16, 10] }
    ];
    private readonly string[] _xAxisDays = { "Mo, 05.05.", "Di, 06.05.", "Mi, 07.05.", "Do, 08.05.", "Fr, 09.05.", "Sa, 10.05.", "So, 11.05."};
    
    //Donut
    private readonly double[] _todaysAppData = { 50, 25, 20};
    private readonly string[] _labels = { "Instagram", "TikTok", "YouTube" };
    
    //Line
    private readonly List<ChartSeries> _monthlyAppData =
    [
        new() { Name = "Instagram", Data = [40, 20, 25, 27, 46, 60, 48] },
        new() { Name = "TikTok", Data = [19, 24, 35, 13, 28, 15, 13] },
        new() { Name = "YouTube", Data = [8, 6, 11, 13, 4, 16, 10] }
    ];
    private readonly string[] _xAxisMonths = { "Jan", "Feb", "Mar", "Apr", "May", "June", "July"};
    
    //List
    Dictionary<string, string> _appRanking = new Dictionary<string, string>
    {
        { "1.", "Instagram" },
        { "2.", "WhatsApp" },
        { "3.", "TikTok" },
        { "4.", "YouTube" },
        { "5.", "Snapchat" }
    };
}
