name: .NET

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]
  workflow_dispatch:
env:
  DOTNETVERSION: 9.0.x
jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '${{env.DOTNETVERSION}}'

      - name: Install MAUI Workloads (macOS)
        if: matrix.os == 'macos-latest'
        run: dotnet workload install maui-ios maui-maccatalyst
      - name: Install MAUI Workloads (Windows)
        if: matrix.os == 'windows-latest'
        run: dotnet workload install maui
      - name: Install MAUI Workloads (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: dotnet workload install maui-android

      - name: Load Code-Signing Certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        if: matrix.os == 'ubuntu-latest'
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests
        if: matrix.os == 'ubuntu-latest'
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Sign and Publish (macOS)
        if: matrix.os == 'macos-latest'
        run: dotnet publish src/Onyx.App/Onyx.App/Onyx.App.csproj -f net9.0-ios -c Release -p:ArchiveOnBuild=true -p:EnableAssemblyILStripping=false
      - name: Upload app to TestFlight
        if: matrix.os == 'macos-latest'
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: 'build/app/net9.0-ios/publish/App.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}


      - name: Publish (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish -f:net9.0-windows -c Release

      - name: Publish (Andoid)
        if: matrix.os == 'windows-latest'
        run: dotnet publish -f net9.0-android -c Release 
        # run: dotnet publish -f net9.0-android -c Release -p:AndroidKeyStore=true -p:AndroidSigningKeyStore=daze-for-private.keystore -p:AndroidSigningKeyAlias=daze-for-private -p:AndroidSigningKeyPass="${{ secrets.KEYSTORE_PASSWORD }}" -p:AndroidSigningStorePass="${{ secrets.KEYSTORE_PASSWORD_ALIAS }}"
        
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifacts
          path: |
            **/bin/Release/**/*.app
            **/bin/Release/**/*.msix
